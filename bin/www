#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express = require('express');
var app = express();
app = require('../app');
var debug = require('debug')('techtron:server');
var http = require('http');
var config = require('../asset/config/config');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || config.apiUrlPort.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, onListening, function (e) {
  if (e) {
    if (e.code === 'EADDRINUSE') {
      console.log('Address in use, retrying...');
      setTimeout(() => {
        server.close();
        server.listen(port);
      }, 1000);
    }
    if (e.code === 'ECONNRESET') {
      console.log('TCP conversation abruptly closed its end of the connection');
      setTimeout(() => {
        server.close();
        server.listen(port);
      }, 1000);
    }
    if (e.code === 'EACCES') {
      console.log('TCP conversation abruptly closed its end of the connection.');
      setTimeout(() => {
        server.close();
        server.listen(port);
      }, 1000);
    }
  }
  console.log('Express server started on port: %s', server.address().port);
});
server.on('error', (e) => {
  if (e.code === 'EADDRINUSE') {
    console.log('Address in use for port :'+port+', retrying...');
    setTimeout(() => {
      server.close();
      server.listen(port);
    }, 1000);
  }
  if (e.code === 'ECONNRESET') {
    console.log('TCP conversation abruptly closed its end of the connection for port:',port)
    setTimeout(() => {
      server.close();
      server.listen(port);
    }, 1000);
  }
  if (e.code === 'EACCES') {
    console.log(port+'requires elevated privilege.Trying to reconnect.....')
    setTimeout(() => {
      server.close();
      server.listen(port);
    }, 1000);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
